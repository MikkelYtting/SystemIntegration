const axios = require('axios');
const express = require('express');
const bodyParser = require('body-parser');
const Datastore = require('nedb');
const app = express();
const db = new Datastore({ filename: 'webhooks.db', autoload: true });

app.use(bodyParser.json());

// Define supported events for local management
const SUPPORTED_EVENTS = ['payment_received', 'payment_processed', 'invoice_processing', 'invoice_completed'];

// External webhook management system details
const externalWebhookManagementSystemUrl = 'http://example-external-webhook-system.com'; // Replace with the actual URL
const myListenerUrl = 'http://<your-ngrok-url>/webhook-listener'; // Replace with your actual ngrok URL after you start ngrok

// Register a webhook in the local system
app.post('/register', (req, res) => {
    const { url, events } = req.body;

    // Check if all requested events are supported
    const allEventsSupported = events.every(event => SUPPORTED_EVENTS.includes(event));

    if (!allEventsSupported) {
        return res.status(400).send({ error: "One or more events are not supported." });
    }

    db.insert({ url, events }, (err, newDoc) => {
        if (err) return res.status(500).send(err);
        res.status(201).send(newDoc);
    });
});

// Unregister a webhook in the local system
app.post('/unregister', (req, res) => {
    const { url } = req.body;

    db.remove({ url: url }, {}, (err, numRemoved) => {
        if (err) return res.status(500).send(err);
        res.status(200).send({ removed: numRemoved });
    });
});

// Ping endpoint to test the local system
app.get('/ping', (req, res) => {
    db.find({}, (err, docs) => {
        if (err) {
            return res.status(500).send('Error fetching registered webhooks.');
        }

        const testPayload = { message: 'This is a test payload' };
        
        docs.forEach(doc => {
            axios.post(doc.url, testPayload)
                .catch(error => console.error(`Error calling webhook ${doc.url}:`, error));
        });

        res.status(200).send('Pinged all registered webhooks.');
    });
});

// Listener endpoint to receive events from the external system
app.post('/webhook-listener', (req, res) => {
    console.log('Received webhook event:', req.body);
    res.send('Event received');
});

// Register with the external webhook management system
app.post('/external-register', async (req, res) => {
    const eventType = req.body.event_type; 

    try {
        const response = await axios.post(`${externalWebhookManagementSystemUrl}/register`, {
            event_type: eventType,
            callback_url: myListenerUrl
        });
        console.log('Registered with external system successfully', response.data);
        res.send('Registered with external system successfully');
    } catch (error) {
        console.error('Error registering with external system', error);
        res.status(500).send('Error registering with external system');
    }
});

// Unregister from the external webhook management system
app.post('/external-unregister', async (req, res) => {
    const eventType = req.body.event_type;

    try {
        const response = await axios.post(`${externalWebhookManagementSystemUrl}/unregister`, {
            event_type: eventType,
            callback_url: myListenerUrl
        });
        console.log('Unregistered from external system successfully', response.data);
        res.send('Unregistered from external system successfully');
    } catch (error) {
        console.error('Error unregistering from external system', error);
        res.status(500).send('Error unregistering from external system');
    }
});

// Start the server
const PORT = 3000; // Use your preferred port
app.listen(PORT, () => {
    console.log(`Webhook system running on port ${PORT}`);
    console.log("Ensure 'myListenerUrl' is updated with your actual ngrok URL after starting ngrok");
});
